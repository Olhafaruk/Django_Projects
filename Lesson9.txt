Если у вас установлен pgAdmin и вы хотите перенести базу данных из SQLite в PostgreSQL, выполните следующие шаги:
Шаг 1: Установите необходимые библиотеки
Установите библиотеку psycopg2 для Django:
pip install psycopg2-binary
Шаг 2: Настройте PostgreSQL через pgAdmin
Откройте pgAdmin и подключитесь к вашему серверу PostgreSQL.
Создайте новую базу данных:
В pgAdmin, щелкните правой кнопкой мыши на "Databases" и выберите "Create" > "Database".
Введите имя базы данных (например, itg) и выберите владельца (например, postgres).
Нажмите "Save".
Шаг 3: Экспортируйте данные из SQLite
Создайте дамп данных из SQLite:
python manage.py dumpdata --format=json --indent=4 > db.json
Шаг 4: Настройте Django для использования PostgreSQL
Обновите settings.py:
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'itg_141024',
        'USER': 'postgres',
        'PASSWORD': 'admin',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}
Шаг 5: Примените миграции в PostgreSQL
Создайте миграции (если их нет):
python manage.py makemigrations
Примените миграции:
python manage.py migrate
Шаг 6: Импортируйте данные в PostgreSQL
Загрузите данные из JSON файла:
python manage.py loaddata db.json
или из articles_4.json

python manage.py loaddata articles_4.json
Шаг 7: Проверьте данные
Запустите сервер разработки и убедитесь, что все работает:
python manage.py runserver
Шаг 8: Очистите старую базу данных SQLite (опционально)
Удалите файл SQLite базы данных:
del db.sqlite3
Примечания
Проверка данных: Убедитесь, что все данные успешно перенесены и что приложение работает корректно с новой базой данных PostgreSQL.
Обработка ошибок: Если возникнут ошибки при импорте данных, проверьте логи и исправьте проблемы в данных или в моделях Django.
commit: Урок 9: перенесли данные из SQLite в PostgreSQL

Синтаксические конструкции для CRUD-запросов: Основы написания команд INSERT, SELECT, UPDATE, DELETE
CRUD (Create, Read, Update, Delete) — это основные операции, которые выполняются с базой данных. В SQL эти операции соответствуют командам INSERT, SELECT, UPDATE и DELETE. Рассмотрим синтаксис каждой из этих команд и приведем по 1-2 примера для каждой операции.

1. Команда INSERT
Команда INSERT используется для добавления новых записей в таблицу. Синтаксис:

INSERT INTO table_name (column1, column2, ...)
VALUES (value1, value2, ...);
Примеры:

Добавление новой категории:
INSERT INTO news_category (name)
VALUES ('Новая категория');
Добавление трех новых статей:
INSERT INTO news_article (title, content, publication_date, views, category_id, slug, is_active)
VALUES
('Новая статья 1', 'Содержание новой статьи 1', '2023-10-01T12:00:00Z', 0, 1, 'novaya-statya-1', TRUE),
('Новая статья 2', 'Содержание новой статьи 2', '2023-10-02T12:00:00Z', 0, 2, 'novaya-statya-2', TRUE),
('Новая статья 3', 'Содержание новой статьи 3', '2023-10-03T12:00:00Z', 0, 3, 'novaya-statya-3', TRUE);
2. Команда SELECT
Команда SELECT используется для выборки данных из таблицы. Синтаксис:

SELECT column1, column2, ...
FROM table_name
WHERE condition;
Примеры:

Выборка всех статей из категории "Технологии":
SELECT *
FROM news_article
WHERE category_id = (SELECT id FROM news_category WHERE name = 'Технологии');
3. Команда UPDATE
Команда UPDATE используется для обновления существующих записей в таблице. Синтаксис:

UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition;
Примеры:

Обновление заголовка статьи с id 2:
UPDATE news_article
SET title = 'Обновленный заголовок'
WHERE id = 2;
Увеличение количества просмотров статьи с id 1 на 50:
UPDATE news_article
SET views = views + 50
WHERE id = 1;
4. Команда DELETE
Команда DELETE используется для удаления записей из таблицы. Синтаксис:

DELETE FROM table_name
WHERE condition;
Примеры:

Удаление статьи с id 3:
Удаление связанных записей в таблице news_article_tags:
DELETE FROM news_article_tags
WHERE article_id = 3;
Удаление статьи из таблицы news_article:
DELETE FROM news_article
WHERE id = 3;
commit: Урок 9: посмотрели операции CRUD для SQL

Синтаксические конструкции для CRUD-запросов: Основы написания команд INSERT, SELECT, UPDATE, DELETE с использованием Django ORM
CRUD (Create, Read, Update, Delete) — это основные операции, которые выполняются с базой данных. В Django ORM эти операции соответствуют методам create(), filter(), update() и delete(). Рассмотрим синтаксис каждого из этих методов и приведем по два примера для каждой операции.

1. Метод create()
Метод create() используется для добавления новых записей в таблицу. Синтаксис:

Model.objects.create(field1=value1, field2=value2, ...)
Примеры:

Добавление новой категории:
from news.models import Category
new_category = Category.objects.create(name='Новая категория')
Добавление трех новых статей:
from news.models import Article, Category
category1 = Category.objects.get(name='Технологии')
category2 = Category.objects.get(name='Наука')
category3 = Category.objects.get(name='Спорт')
Article.objects.create(
    title='Новая статья 1',
    content='Содержание новой статьи 1',
    publication_date='2023-10-01T12:00:00Z',
    views=0,
    category=category1,
    slug='novaya-statya-1',
    is_active=True
)
Article.objects.create(
    title='Новая статья 2',
    content='Содержание новой статьи 2',
    publication_date='2023-10-02T12:00:00Z',
    views=0,
    category=category2,
    slug='novaya-statya-2',
    is_active=True
)
Article.objects.create(
    title='Новая статья 3',
    content='Содержание новой статьи 3',
    publication_date='2023-10-03T12:00:00Z',
    views=0,
    category=category3,
    slug='novaya-statya-3',
    is_active=True
)
2. Метод filter()
Метод filter() используется для выборки данных из таблицы. Синтаксис:

Model.objects.filter(field1=value1, field2=value2, ...)
Примеры:

Выборка всех статей из категории "Технологии":
from news.models import Article, Category
category = Category.objects.get(name='Технологии')
articles = Article.objects.filter(category=category)
3. Метод update()
Метод update() используется для обновления существующих записей в таблице. Синтаксис:

Model.objects.filter(condition).update(field1=value1, field2=value2, ...)
Примеры:

Обновление заголовка статьи с id 4:
from news.models import Article
Article.objects.filter(id=4).update(title='Обновленный заголовок')
Увеличение количества просмотров статьи с id 5 на 50:
from news.models import Article
from django.db.models import F
Article.objects.filter(id=5).update(views=F('views') + 50)
4. Метод delete()
Метод delete() используется для удаления записей из таблицы. Синтаксис:

Model.objects.filter(condition).delete()
Примеры:

Удаление статьи с id 6:
Удаление связанных записей в таблице news_article_tags:
from news.models import Article, Tag
article = Article.objects.get(id=6)
article.tags.clear()  # Удаление всех связанных тегов
article.delete()  # Удаление статьи
commit: Урок 9: те же запросы, но в Django ORM