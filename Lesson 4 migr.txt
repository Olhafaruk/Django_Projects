Урок 4
Инициализирующие миграции
Применили 18 стартовых миграций для создания структуры БД и настройки python manage.py migrate Инициализирующая миграция — это первая миграция, которая создается при инициализации нового приложения в Django. Она содержит начальную структуру базы данных, основанную на моделях, определенных в вашем приложении. Инициализирующая миграция важна для установления базовой схемы базы данных, с которой будет работать ваше приложение. auth: Миграции для приложения аутентификации, которое включает модели пользователей, групп и разрешений. contenttypes: Миграции для приложения, которое отслеживает типы контента в базе данных. sessions: Миграции для приложения, которое управляет сессиями пользователей. admin: Миграции для административного интерфейса Django.

commit: Урок 4: применение инициализирующих миграций

Создаём первую модель данных
Описание модели
class Article(models.Model):
    title = models.CharField(max_length=255)
    content = models.TextField()
    publication_date = models.DateTimeField(auto_now_add=True)
    views = models.IntegerField(default=0)
Создание миграции python manage.py makemigrations
Применение миграции python manage.py migrate
commit: Урок 4: создание модели данных статьи и применение миграции

Знакомство с Shell Plus и работа с моделью Article в интерактивной оболочке Django
Установили Shell Plus командой pip install django-extensions
Добавили django_extensions в INSTALLED_APPS в файле settings.py (перед нашим приложением news)
Запустили Shell Plus командой python manage.py shell_plus (для отображения SQL запросов в консоли - python manage.py shell_plus --print-sql) (для выхода из консоли Shell Plus - exit())
commit: Урок 4: установка Shell Plus и подготовка ORM

Загрузка данных в базу данных из JSON файла
python manage.py loaddata articles.json

commit: Урок 4: Наполнили базу данных тестовыми данными

Установили IPython, чтобы прекратить страдания:
pip install ipython
commit: Урок 4: установка ipython

Операции CRUD в базе данных
# Откройте Django Shell Plus
python manage.py shell_plus

# Импортируйте модель Article
from news.models import Article

# Создание новой статьи
new_article = Article(
    title="Вода стала розовой!",
    content="Вчера вода во всех реках и озерах стала розовой. Ученые обещают найти причину этого явления.",
    publication_date="2023-10-31T12:00:00Z",
    views=0
)
new_article.save()

# Чтение всех статей
all_articles = Article.objects.all()
for article in all_articles:
    print(article.title, article.content, article.publication_date, article.views)

# Чтение одной статьи по её ID
article = Article.objects.get(pk=1)
print(article.title, article.content, article.publication_date, article.views)

# Обновление статьи
article.title = "Обновленная абсурдная новость"
article.content = "Обновленное содержание абсурдной новости"
article.save()

# Удаление статьи
article.delete()
commit: Урок 4: Посмотрели операции CRUD через командную строку