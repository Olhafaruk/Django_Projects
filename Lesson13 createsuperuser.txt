Урок 13
Создание суперпользователя
python manage.py createsuperuser
ввести имя для администратора
ввести email для администратора (не обязательно настоящий)
ввести пароль
повторить пароль
если пароль слишком короткий, слишком общий или похож на имя пользователя, то будет предложено ввести другой пароль или согласиться предупреждениями
commit: Урок 13: создали суперпользователя

Регистрация моделей в админ-панели
admin.py
from .models import Article, Category, Tag
admin.site.register(Article)
admin.site.register(Category)
admin.site.register(Tag)
commit: Урок 13: зарегистрировали модели в админ-панели

Изменение заголовка, подзаголовка и тд в админ-панели
admin.py
admin.site.site_header = "Info to Go Admin Portal"
admin.site.site_title = "Info to Go Admin Portal"
admin.site.index_title = "Welcome to ITG Admin Portal"
В settings.py можно изменить язык админ-панели в константе LANGUAGE_CODE

commit: Урок 13: изменили заголовки в административной панели

Настройка полей в отображении статей в админ-панели
admin.py
class ArticleAdmin(admin.ModelAdmin):
    list_display = ('title', 'category', 'publication_date', 'views')
admin.site.register(Article, ArticleAdmin)
commit: Урок 13: настроили поля в отображении статей в админ-панели

Добавление фильтров в админ-панели
admin.py
class ArticleAdmin(admin.ModelAdmin):
    list_display = ('title', 'category', 'publication_date', 'views')
    list_filter = ('category')
admin.site.register(Article, ArticleAdmin)
commit: Урок 13: добавили фильтры в админ-панель

Добавление поиска в админ-панели
admin.py
class ArticleAdmin(admin.ModelAdmin):
    list_display = ('title', 'category', 'publication_date', 'views')
    list_filter = ('category')
    search_fields = ('title', 'content')
admin.site.register(Article, ArticleAdmin)
commit: Урок 13: добавили поиск в админ-панель

Добавление пользовательского менеджера модели
Создание пользовательского менеджера
class ArticleManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset().filter(is_active=True)
    def sorted_by_title(self):
        return self.get_queryset().all().order_by('-title')
Добавление пользовательского менеджера в модель
class Article(models.Model):
    ...
    is_active = models.BooleanField(default=True)
    objects = ArticleManager()
Создание миграции
python manage.py makemigrations

Применение миграции
python manage.py migrate

Проверка пользовательского менеджера модели в shell_plus
published_articles = Article.objects.sorted_by_title()
for i in published_articles:
    print(i.title)
commit: Урок 13: Добавление пользовательского менеджера модели Article

Добавление пользовательского поля в админ-панели
admin.py
from django.utils.html import format_html
class ArticleAdmin(admin.ModelAdmin):
    list_display = ('title', 'category', 'publication_date', 'views', 'is_active', 'colored_status')
    def colored_status(self, obj):
        return format_html('<span style="color: {};">{}</span>', 'green' if obj.is_active else 'red', obj.is_active)
    colored_status.short_description = 'Статус'
admin.site.register(Article, ArticleAdmin)
Дополнение
В models.py добавили пользовательский менеджер модели AllArticleManager для того чтобы получать список статей вне зависимости от поля is_active.

class AllArticleManager(models.Manager):
    def get_queryset(self):
        return super().get_queryset()
В admin.py добавили метод get_queryset в класс ArticleAdmin для того чтобы получать список статей вне зависимости от поля is_active.

    def get_queryset(self, request):
        return Article.all_objects.get_queryset()
**commit: Урок 13: добавили пользовательское поле в админ-панель

Добавление дополнительных действий в админ-панели (сделать неактивными выбранные статьи)
admin.py
def make_inactive(modeladmin, request, queryset):
    queryset.update(is_active=False)

make_inactive.short_description = "Сделать неактивными выбранные статьи

class ArticleAdmin(admin.ModelAdmin):
    ...
    actions = (make_inactive,)
    ...
**commit: Урок 13: добавили дополнительные действия в админ-панель

Настройка отображения полей в админ-панели
admin.py
class ArticleAdmin(admin.ModelAdmin):
    ...
    fields = ('title', 'content', 'category', 'tags', 'is_active')
    ...
**commit: Урок 13: настроили отображение полей в админ-панели

Добавление группировки в админ-панели
admin.py
class ArticleAdmin(admin.ModelAdmin):
    ...
    fieldsets = (
        ('Главная информация', {'fields': ('title', 'content')}),
        ('Дополнительные параметры', {'fields': ('category', 'tags', 'is_active')}),
    )
    ...
commit: Урок 13: добавили группировку в админ-панель

Добавление гибкого редактирования тегов в админ-панели
admin.py
class TagInline(admin.TabularInline):
    model = Tag.article.through
    extra = 1
class ArticleAdmin(admin.ModelAdmin):
    ...
    inlines = [TagInline]
    ...
commit: Урок 13: добавили гибкое редактирование тегов в админ-панели