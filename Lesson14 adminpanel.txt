Урок 14
Добавление пагинации в админ-панель
admin.py
class ArticleAdmin(admin.ModelAdmin):
    ...
    list_per_page = 20
    ...
commit: Урок 14: добавили пагинацию в админ-панель

Добавление ссылок по другим полям в админ-панели
admin.py
class ArticleAdmin(admin.ModelAdmin):
    ...
    list_display_links = ('id',)  # запятая в конце нужна, чтобы указать, что это кортеж
    ...
commit: Урок 14: добавили ссылки по другим полям в админ-панель

Добавление сортировок по полям
admin.py
class ArticleAdmin(admin.ModelAdmin):
    ...
    ordering = ('-views', 'title')
    ...
commit: Урок 14: добавили сортировки по полям в админ-панели

Перевод админ-панели
models.py
class Category(models.Model):
    name = models.CharField(max_length=255, unique=True)
    class Meta:
        db_table = 'Categories'  # без указания этого параметра, таблица в БД будет называться вида 'news_categorys'
        verbose_name = 'Категория'  # единственное число для отображения в админке
        verbose_name_plural = 'Категории'  # множественное число для отображения в админке
models.py
class Article(models.Model):
    title = models.CharField(..., verbose_name='Заголовок')
    content = models.TextField(..., verbose_name='Содержание')
    publication_date = models.DateTimeField(...,  verbose_name='Дата публикации')
    views = models.IntegerField(...,  verbose_name='Просмотры')
    category = models.ForeignKey(...,  verbose_name='Категория')
    tags = models.ManyToManyField(...,  verbose_name='Теги')
    slug = models.SlugField(...,  verbose_name='Слаг')
    is_active = models.BooleanField(...,  verbose_name='Активна')
apps.py
class NewsConfig(AppConfig):
    ...
    verbose_name = 'Статья'
    verbose_name_plural = 'Статьи'
возможные параметры в class Meta моделей данных
verbose_name:

Назначение: Устанавливает человеко-читаемое имя для модели в единственном числе.
Использование: Полезно для улучшения читаемости административного интерфейса Django. Например, если у вас есть модель Book, вы можете установить verbose_name = "книга", чтобы в админке отображалось "книга" вместо "book".
verbose_name_plural:

Назначение: Устанавливает человеко-читаемое имя для модели во множественном числе.
Использование: Аналогично verbose_name, но для множественного числа. Например, verbose_name_plural = "книги" для модели Book.
db_table:

Назначение: Определяет имя таблицы в базе данных, которое будет использоваться для хранения данных модели.
Использование: Полезно, если вы хотите использовать конкретное имя таблицы, отличное от имени по умолчанию, которое Django создает на основе имени модели.
ordering:

Назначение: Указывает порядок сортировки объектов модели по умолчанию.
Использование: Полезно для обеспечения консистентного порядка отображения объектов. Например, ordering = ['-created_at'] сортирует объекты по убыванию даты создания.
unique_together:

Назначение: Устанавливает уникальность для комбинации нескольких полей.
Использование: Полезно для предотвращения дублирования данных. Например, unique_together = ('field1', 'field2') гарантирует, что комбинация значений field1 и field2 будет уникальной.
index_together:

Назначение: Создает индекс для нескольких полей.
Использование: Улучшает производительность запросов, которые фильтруются по этим полям. Например, index_together = ('field1', 'field2') создаст индекс для комбинации field1 и field2.
indexes:

Назначение: Позволяет определять пользовательские индексы.
Использование: Полезно для создания сложных индексов, таких как частичные индексы или индексы с определенными условиями. Например, indexes = [models.Index(fields=['field1', 'field2'])].
abstract:

Назначение: Делает модель абстрактной, то есть она не создает таблицу в базе данных.
Использование: Полезно для создания базовых классов, которые будут наследоваться другими моделями. Например, abstract = True для базовой модели с общими полями.
default_related_name:

Назначение: Устанавливает имя обратной связи по умолчанию для отношений.
Использование: Полезно для упрощения доступа к связанным объектам. Например, default_related_name = "related_objects".
get_latest_by:

Назначение: Указывает имя поля, по которому будет осуществляться выборка последнего объекта.
Использование: Полезно для быстрого доступа к последнему объекту. Например, get_latest_by = "created_at" позволяет использовать метод latest() для получения последнего объекта по дате создания.
managed:

Назначение: Управляет тем, будет ли Django создавать, изменять или удалять таблицу для этой модели.
Использование: Полезно, если таблица управляется вне Django. Например, managed = False для модели, которая отображает существующую таблицу в базе данных.
permissions:

Назначение: Позволяет определять пользовательские разрешения для модели.
Использование: Полезно для создания специфичных разрешений, которые не входят в стандартные CRUD-операции. Например, permissions = [("can_publish", "Can publish posts")] добавляет разрешение на публикацию постов.
commit: Урок 14: перевели админ-панель

добавили поле status в модель Article
тип BooleanField используется для хранения булевых значений (True или False).
параметр choices используется для ограничения возможных значений поля и для удобного отображения этих значений в админке Django.
В данном случае, choices задается с помощью tuple(map(lambda x: (bool(x[0]), x[1]), Status.choices)).
нам нужно было ограничить значения поля status только двумя возможными состояниями: True (Проверено) и False (Не проверено). Для этого используется BooleanField, который по своей сути ограничивает значения до двух возможных вариантов.

Status.choices возвращает кортеж кортежей вида ((0, 'Не проверено'), (1, 'Проверено')).
С помощью map(lambda x: (bool(x[0]), x[1]), Status.choices) эти значения преобразуются в булевы значения: ((False, 'Не проверено'), (True, 'Проверено')).
Это позволяет использовать BooleanField с человеко-читаемыми именами для значений.
commit: Урок 14: добавили поле status

добавили в админ. панель поле указывающее на наличие слова "пауки" в содержании статьи
добавили в админ. панель дополнительные действия: пометить статьи как проверенные и как не проверенные
commit: Урок 14: добавили в админ. панель поле наличие слова пауки в содержании и дополнительные действия

Класс ArticleCodeFilter
Наследуется от SimpleListFilter, который предоставляет базовую функциональность для создания простых фильтров в админке Django.

Атрибут title
Задает название фильтра, которое будет отображаться в админке. В данном случае, это 'Внутри пауки'.

Атрибут parameter_name
Задает имя параметра, которое будет использоваться в URL для фильтрации. В данном случае, это has_spiders.

Метод lookups
Возвращает кортеж кортежей, где каждый внутренний кортеж состоит из двух элементов: значения параметра и человеко-читаемого названия. В данном случае, возвращаются два варианта: ('yes', 'Да') и ('no', 'Нет').

Метод queryset
Принимает запрос request и исходный набор данных queryset. В зависимости от значения параметра has_spiders (которое можно получить с помощью self.value()), фильтрует набор данных. Если значение параметра has_spiders равно yes, фильтрует набор данных, чтобы включить только те статьи, в которых поле content содержит слово 'пауки'. Если значение параметра has_spiders равно no, фильтрует набор данных, чтобы исключить статьи, в которых поле content содержит слово 'пауки'.

commit: Урок 14: добавили кастомный фильтр по наличию пауков в тексте статьи

другой способ регистрации модели в админ-панели
admin.py
@admin.register(Article)
class ArticleAdmin(admin.ModelAdmin):
    ...
commit: Урок 14: посмотрели другой способ регистрации модели